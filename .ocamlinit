(**************************************************************************)
(*                                                                        *)
(* OCaml template Copyright (C) 2004-2010                                 *)
(*  Sylvain Conchon, Jean-Christophe Filliatre and Julien Signoles        *)
(* Adapted to boolean logic by Jonathan Kimmitt                           *)
(*  Copyright 2016 University of Cambridge                                *)
(*                                                                        *)
(*  This software is free software; you can redistribute it and/or        *)
(*  modify it under the terms of the GNU Library General Public           *)
(*  License version 2.1, with the special exception on linking            *)
(*  described in file LICENSE.                                            *)
(*                                                                        *)
(*  This software is distributed in the hope that it will be useful,      *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  *)
(*                                                                        *)
(**************************************************************************)

(*
open Output_types
open Output_parser
open Output
open Template

let _ = parse "lef.output";;
*)

open Lef_file_edited
open Lef_file_main

let rec lst = function
| EMPTY_TOKEN -> []
| ERROR_TOKEN -> []
| TUPLE2(lst', itm) -> itm :: lst lst'
| err -> failwith "lst"
;;

let rec tolst = function
| TUPLE4(K_PROPDEF,arg2,K_END,K_PROPDEF) -> map' arg2
| TUPLE1(a) -> TUPLE1(tolst a)
| TUPLE2(a,b) -> TUPLE2(tolst a, tolst b)
| TUPLE3(a,b,c) -> TUPLE3(tolst a, tolst b, tolst c)
| TUPLE4(a,b,c,d) -> TUPLE4(tolst a, tolst b, tolst c, tolst d)
| oth -> oth

and map' arg = TLIST (List.map tolst (List.rev (lst arg)))

let rslt = match parse "complete.5.8.lef" with TUPLE3(a,b,c) -> map' a | oth -> oth


