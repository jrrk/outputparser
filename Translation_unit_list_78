	       let decl = TUPLE3($1,$2,SEMICOLON) in
	       (match ($1,$2) with
		      | (TUPLE2 (TYPEDEF, _), CONS1 (TUPLE4 (IDENTIFIER id_t, LPAREN, _, RPAREN))) ->
			   typehash_add id_t
                      | (TUPLE2 (TYPEDEF, INT), CONS1 (TUPLE4 (
		           TUPLE3 (LPAREN, TUPLE2 (STAR, IDENTIFIER id_t), RPAREN), LPAREN, _, RPAREN))) ->
			   typehash_add id_t
	              | (TUPLE2 (TYPEDEF, TUPLE2 (STRUCT, IDENTIFIER str_id)),
   		          	      CONS1 (TUPLE2 (STAR, IDENTIFIER id_t))) ->
                           typehash_add id_t
		      | (TUPLE2 (TYPEDEF, typ),
					 CONS1 (TUPLE4 (IDENTIFIER id_t, LBRACK, CONSTANT _, RBRACK))) ->
			   typehash_add id_t
	       	      | (TUPLE2(TYPEDEF, _), IDENTIFIER id_t) -> typehash_add id_t
	       	      | (TUPLE2(TYPEDEF, _), TUPLE2(STAR, (IDENTIFIER id_t))) -> typehash_add id_t
		      | (TUPLE2(TYPEDEF, _),
		         TUPLE4(TUPLE3(LPAREN, TUPLE2(STAR, IDENTIFIER id_t), RPAREN), _, _, RPAREN)) ->
			   typehash_add id_t
		      | (TUPLE2 (TYPEDEF, TUPLE4 (UNION, LBRACE, contents, RBRACE)), CONS1 (IDENTIFIER id_t)) ->
			   typehash_add id_t
		      | (TUPLE2 (TYPEDEF, _), CONS1 (IDENTIFIER id_t)) -> typehash_add id_t
(*
		      | (TUPLE2 (TYPEDEF, _), CONS1 (TUPLE4 (IDENTIFIER fn, LPAREN,
		           CONS1 (CONS1 (TUPLE2 (VOID, TUPLE2 (STAR, IDENTIFIER id_t)))), RPAREN))) ->
			   typehash_add id_t
*)
		      | (TUPLE2 (TYPEDEF, _), CONS1 (TUPLE2 (STAR, IDENTIFIER id_t))) ->
			   typehash_add id_t
		      | (TUPLE2 (TYPEDEF, _), _) as oth -> declst := oth :: !declst
		      | oth -> ());
	       decl
