# 19 "CompilationUnit_lex.mll"
 
  open Lexing
  open CompilationUnit

  let verbose = ref true
  let lincnt = ref 0

  let keyword =
    let h = Hashtbl.create 17 in
    List.iter 
      (fun (k,s) -> Hashtbl.add h s k)
      [
	ABSTRACT, "ABSTRACT"; 
	ACCEPT, "ACCEPT"; 
	AMPERSAND, "AMPERSAND"; 
	AT, "AT"; 
	BACKQUOTE, "BACKQUOTE"; 
	BACKSLASH, "BACKSLASH"; 
	CARET, "CARET"; 
	CASE, "CASE"; 
	CATCH, "CATCH"; 
	CLASS, "CLASS"; 
	COLON, "COLON"; 
	COMMA, "COMMA"; 
	DEFAULT, "DEFAULT"; 
	DEF, "DEF"; 
	DOLLAR, "DOLLAR"; 
	DOT, "DOT"; 
	DOUBLEQUOTE, "DOUBLEQUOTE"; 
	DO, "DO"; 
	ELSE, "ELSE"; 
	EMPTY_TOKEN, "EMPTY_TOKEN"; 
	END, "END"; 
	EOF_TOKEN, "EOF_TOKEN"; 
	EQGT, "EQGT"; 
	EQUALS, "EQUALS"; 
	ERROR_TOKEN, "ERROR_TOKEN"; 
	ERROR, "ERROR"; 
	EXTENDS, "EXTENDS"; 
	FALSE, "FALSE"; 
	FINALLY, "FINALLY"; 
	FINAL, "FINAL"; 
	FOR_SOME, "FOR_SOME"; 
	FOR, "FOR"; 
	GREATER, "GREATER"; 
	HASH, "HASH"; 
	HYPHEN, "HYPHEN"; 
	IF, "IF"; 
	IMPLICIT, "IMPLICIT"; 
	IMPORT, "IMPORT"; 
	LAZY, "LAZY"; 
	LBRACE, "LBRACE"; 
	LBRACK, "LBRACK"; 
	LESS, "LESS"; 
	LINEFEED, "LINEFEED"; 
	LPAREN, "LPAREN"; 
	MATCH, "MATCH"; 
	NEWLINE, "NEWLINE"; 
	NEW, "NEW"; 
	NULL, "NULL"; 
	OBJECT, "OBJECT"; 
	OVERRIDE, "OVERRIDE"; 
	PACKAGE, "PACKAGE"; 
	PERCENT, "PERCENT"; 
	PLING, "PLING"; 
	PLUS, "PLUS"; 
	PRIVATE, "PRIVATE"; 
	PROTECTED, "PROTECTED"; 
	QUERY, "QUERY"; 
	QUOTE, "QUOTE"; 
	RBRACE, "RBRACE"; 
	RBRACK, "RBRACK"; 
	RETURN, "RETURN"; 
	RPAREN, "RPAREN"; 
	SEALED, "SEALED"; 
	SEMICOLON, "SEMICOLON"; 
	STAR, "STAR"; 
	SUPER, "SUPER"; 
	THIS, "THIS"; 
	THROW, "THROW"; 
	TILDE, "TILDE"; 
	TRAIT, "TRAIT"; 
	TRUE, "TRUE"; 
	TRY, "TRY"; 
	TYPE, "TYPE"; 
	UNDERSCORE, "UNDERSCORE"; 
	VAL, "VAL"; 
	VARID, "VARID"; 
	VAR, "VAR"; 
	VBAR, "VBAR"; 
	WHILE, "WHILE"; 
	WITH, "WITH"; 
	YIELD, "YIELD"; 
      ];
    fun s -> Hashtbl.find h (String.uppercase s)

let tok arg = if !verbose then print_endline (
  match arg with
    | PLAINID s -> "'"^s^"'"
    | _ -> Ordscala.getstr arg );
  arg

# 105 "CompilationUnit_lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\215\255\216\255\217\255\218\255\219\255\220\255\221\255\
    \222\255\223\255\224\255\225\255\226\255\230\255\232\255\233\255\
    \234\255\235\255\236\255\237\255\238\255\239\255\240\255\241\255\
    \242\255\243\255\244\255\245\255\247\255\248\255\093\000\080\000\
    \160\000\240\000\006\001\028\001\253\255\033\001\091\000\129\000\
    \051\001\082\001\249\255\109\000";
  Lexing.lex_backtrk =
   "\004\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\009\000\005\000\
    \004\000\004\000\003\000\004\000\255\255\001\000\028\000\000\000\
    \004\000\004\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\043\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\039\000\
    \255\255\255\255\000\000\043\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\037\000\036\000\000\000\000\000\037\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \037\000\028\000\030\000\027\000\026\000\025\000\024\000\023\000\
    \022\000\018\000\014\000\035\000\013\000\035\000\033\000\038\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\011\000\010\000\019\000\009\000\015\000\008\000\
    \007\000\031\000\031\000\031\000\031\000\032\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\021\000\012\000\017\000\006\000\005\000\
    \004\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\020\000\003\000\016\000\002\000\042\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\039\000\255\255\000\000\000\000\000\000\042\000\
    \000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\000\000\000\000\000\000\000\000\031\000\
    \000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\040\000\000\000\040\000\000\000\000\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\031\000\031\000\031\000\032\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\000\000\000\000\000\000\000\000\031\000\
    \029\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\040\000\000\000\040\000\033\000\000\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\037\000\000\000\000\000\000\000\037\000\000\000\
    \000\000\040\000\000\000\040\000\033\000\040\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \000\000\037\000\000\000\000\000\000\000\000\000\000\000\035\000\
    \000\000\035\000\033\000\040\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\040\000\000\000\
    \040\000\040\000\000\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \040\000\000\000\000\000\000\000\000\000\040\000\000\000\040\000\
    \000\000\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\038\000\039\000\255\255\255\255\255\255\043\000\
    \255\255\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\255\255\255\255\255\255\255\255\031\000\
    \255\255\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\032\000\255\255\032\000\255\255\255\255\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\255\255\255\255\255\255\032\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\033\000\255\255\033\000\033\000\255\255\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\037\000\255\255\255\255\255\255\037\000\255\255\
    \255\255\034\000\255\255\034\000\034\000\033\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \255\255\037\000\255\255\255\255\255\255\255\255\255\255\035\000\
    \255\255\035\000\035\000\034\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\030\000\040\000\255\255\
    \040\000\035\000\255\255\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\043\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \040\000\255\255\255\255\255\255\255\255\041\000\255\255\041\000\
    \255\255\039\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 132 "CompilationUnit_lex.mll"
      ( token lexbuf )
# 301 "CompilationUnit_lex.ml"

  | 1 ->
# 134 "CompilationUnit_lex.mll"
      ( token lexbuf )
# 306 "CompilationUnit_lex.ml"

  | 2 ->
# 136 "CompilationUnit_lex.mll"
      ( incr lincnt; token lexbuf )
# 311 "CompilationUnit_lex.ml"

  | 3 ->
let
# 137 "CompilationUnit_lex.mll"
              n
# 317 "CompilationUnit_lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 138 "CompilationUnit_lex.mll"
      ( tok ( INTEGERLITERAL (int_of_string n) ) )
# 321 "CompilationUnit_lex.ml"

  | 4 ->
let
# 139 "CompilationUnit_lex.mll"
              n
# 327 "CompilationUnit_lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 140 "CompilationUnit_lex.mll"
      ( tok ( let f = float_of_string n in FLOATINGPOINTLITERAL f ) )
# 331 "CompilationUnit_lex.ml"

  | 5 ->
let
# 141 "CompilationUnit_lex.mll"
             s
# 337 "CompilationUnit_lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 142 "CompilationUnit_lex.mll"
      ( tok ( try keyword s with Not_found -> PLAINID s ) )
# 341 "CompilationUnit_lex.ml"

  | 6 ->
let
# 143 "CompilationUnit_lex.mll"
               s
# 347 "CompilationUnit_lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 144 "CompilationUnit_lex.mll"
      ( tok ( STRINGLITERAL s ) )
# 351 "CompilationUnit_lex.ml"

  | 7 ->
# 146 "CompilationUnit_lex.mll"
      ( tok ( EOF_TOKEN ) )
# 356 "CompilationUnit_lex.ml"

  | 8 ->
# 148 "CompilationUnit_lex.mll"
( tok ( PLING ) )
# 361 "CompilationUnit_lex.ml"

  | 9 ->
# 151 "CompilationUnit_lex.mll"
( tok ( DOUBLEQUOTE ) )
# 366 "CompilationUnit_lex.ml"

  | 10 ->
# 154 "CompilationUnit_lex.mll"
( tok ( HASH ) )
# 371 "CompilationUnit_lex.ml"

  | 11 ->
# 157 "CompilationUnit_lex.mll"
( tok ( DOLLAR ) )
# 376 "CompilationUnit_lex.ml"

  | 12 ->
# 160 "CompilationUnit_lex.mll"
( tok ( PERCENT ) )
# 381 "CompilationUnit_lex.ml"

  | 13 ->
# 163 "CompilationUnit_lex.mll"
( tok ( AMPERSAND ) )
# 386 "CompilationUnit_lex.ml"

  | 14 ->
# 166 "CompilationUnit_lex.mll"
( tok ( QUOTE ) )
# 391 "CompilationUnit_lex.ml"

  | 15 ->
# 169 "CompilationUnit_lex.mll"
( tok ( LPAREN ) )
# 396 "CompilationUnit_lex.ml"

  | 16 ->
# 172 "CompilationUnit_lex.mll"
( tok ( LBRACK ) )
# 401 "CompilationUnit_lex.ml"

  | 17 ->
# 175 "CompilationUnit_lex.mll"
( tok ( LBRACE ) )
# 406 "CompilationUnit_lex.ml"

  | 18 ->
# 178 "CompilationUnit_lex.mll"
( tok ( LESS ) )
# 411 "CompilationUnit_lex.ml"

  | 19 ->
# 181 "CompilationUnit_lex.mll"
( tok ( RPAREN ) )
# 416 "CompilationUnit_lex.ml"

  | 20 ->
# 184 "CompilationUnit_lex.mll"
( tok ( RBRACK ) )
# 421 "CompilationUnit_lex.ml"

  | 21 ->
# 187 "CompilationUnit_lex.mll"
( tok ( RBRACE ) )
# 426 "CompilationUnit_lex.ml"

  | 22 ->
# 190 "CompilationUnit_lex.mll"
( tok ( GREATER ) )
# 431 "CompilationUnit_lex.ml"

  | 23 ->
# 193 "CompilationUnit_lex.mll"
( tok ( STAR ) )
# 436 "CompilationUnit_lex.ml"

  | 24 ->
# 196 "CompilationUnit_lex.mll"
( tok ( PLUS ) )
# 441 "CompilationUnit_lex.ml"

  | 25 ->
# 199 "CompilationUnit_lex.mll"
( tok ( COMMA ) )
# 446 "CompilationUnit_lex.ml"

  | 26 ->
# 202 "CompilationUnit_lex.mll"
( tok ( HYPHEN ) )
# 451 "CompilationUnit_lex.ml"

  | 27 ->
# 205 "CompilationUnit_lex.mll"
( tok ( DOT ) )
# 456 "CompilationUnit_lex.ml"

  | 28 ->
# 208 "CompilationUnit_lex.mll"
( tok ( SLASH ) )
# 461 "CompilationUnit_lex.ml"

  | 29 ->
# 211 "CompilationUnit_lex.mll"
( tok ( BACKSLASH ) )
# 466 "CompilationUnit_lex.ml"

  | 30 ->
# 214 "CompilationUnit_lex.mll"
( tok ( COLON ) )
# 471 "CompilationUnit_lex.ml"

  | 31 ->
# 217 "CompilationUnit_lex.mll"
( tok ( SEMICOLON ) )
# 476 "CompilationUnit_lex.ml"

  | 32 ->
# 220 "CompilationUnit_lex.mll"
( tok ( EQUALS ) )
# 481 "CompilationUnit_lex.ml"

  | 33 ->
# 223 "CompilationUnit_lex.mll"
( tok ( QUERY ) )
# 486 "CompilationUnit_lex.ml"

  | 34 ->
# 226 "CompilationUnit_lex.mll"
( tok ( AT ) )
# 491 "CompilationUnit_lex.ml"

  | 35 ->
# 229 "CompilationUnit_lex.mll"
( tok ( CARET ) )
# 496 "CompilationUnit_lex.ml"

  | 36 ->
# 232 "CompilationUnit_lex.mll"
( tok ( UNDERSCORE ) )
# 501 "CompilationUnit_lex.ml"

  | 37 ->
# 235 "CompilationUnit_lex.mll"
( tok ( BACKQUOTE ) )
# 506 "CompilationUnit_lex.ml"

  | 38 ->
# 238 "CompilationUnit_lex.mll"
( tok ( VBAR ) )
# 511 "CompilationUnit_lex.ml"

  | 39 ->
# 241 "CompilationUnit_lex.mll"
( tok ( TILDE ) )
# 516 "CompilationUnit_lex.ml"

  | 40 ->
let
# 243 "CompilationUnit_lex.mll"
       oth
# 522 "CompilationUnit_lex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 244 "CompilationUnit_lex.mll"
( tok ( failwith ("lex_file_lex: "^String.make 1 oth) ) )
# 526 "CompilationUnit_lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

